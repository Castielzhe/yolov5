一、文件说明
    classify: 用YOLOv5的骨干网络实现分类业务
    data: 存储配置文件
        data/***.yaml: 数据配置文件，给定数据位置的
        data/hyps/***.yaml: 超参数配置文件
        data/images: 测试图像文件所在的文件夹
        data/scripts: 脚本文件夹，主要用于下载数据(Linux环境下可运行)
    models: 模型核心代码以及模型结构配置文件
    segment: YOLOv5应用到图像分割业务中的训练、预测、评估代码
    utils: 工具类代码
    detect.py: 目标检测模型检测的相关代码--> 用训练好的模型做目标检测
    export.py: 将PyTorch生成的原始格式模型转换成其它格式
    train.py: 目标检测模型训练代码
    val.py: 目标检测模型评估代码
    hubconf.py: 针对torch.hub提供的入口代码文件
===========================================================
YOLOv5结构更新(v7.0代码结构相比于ppt所说的内容):
-1. 默认激活函数: nn.SiLU
-2. 取消Focus结构，直接替换成卷积: 6*6的卷积核/步长为2/填充为2
-3. 将CSP结构替换成C3结构: 删除了部分卷积操作 + BN位置发生改变
-4. 将SPP池化更改为SPPF池化: 速度会更快 --> https://blog.csdn.net/weixin_43694096/article/details/126354660
-5. 将边框回归转换方式发生了变化，中心点更改为: 2*sigmoid(tx) + cx; 高度/宽度更改为: (2*sigmoid(tw))**2 * Pw, Pw表示先验框的大小<预测边框和先验框之间的比例在0-4之间>
-6. 分类概率计算采用sigmoid
-7. 训练过程中,数据增强方面: mosaic,mixup,随机的HSV增强,随机垂直方向翻转,随机水平方向翻转,cutout,opencv中的基于矩阵坐标映射的数据增强(平移,旋转,缩放,剪切,透视...)
-8. 训练过程中,使用warmup的方式进行学习率变化(并且bias和weight的方式并不相同)<整体来讲:学习率先上升,后下降>
-9. 训练过程中,支持多尺度训练,在[320, 920]之间任意选择一个尺度(要求整除32)
-10. 训练过程中,支持基于验证数据集的mAP指标动态计算类别权重(mAPs,类别样本的数量),样本权重,从而针对样本权重大的样本,更多的参与模型训练
===========================================================
二、操作
    源码下载：git clone https://github.com/ultralytics/yolov5；导入开发工具
    修改一下分支: master --checkout--> v7.0 -newbranch-> yolov5_xm
    给定yolov5运行python环境，并结合requirements.txt安装对应的库
    编写文件[00_hub代码测试.py]查看yolov5的执行效果
    编写文件[01_YOLOv5网络结构创建代码理解.py]查看yolov5模型配置信息
    创建一个新结构模块：
        下采样模块：池化、卷积
        上采样模块：Upsample、反卷积
        步骤：
            -1. 在common.py中编写对应模块，并测试模型是否正常
            -2. 在yolo.py文件中的模型构建解析方法:parse_model，针对新增的模块进行参数处理
            -3. 在模型结构yaml文件中配置使用，并测试即可
    debug了一下模型的forward的过程
    运行一下train.py文件
        -1. 从网络上下载对应版本的模型文件：yolov5s.pt，并放到train.py所在的文件夹中
        -2. 从网络上下载coco_128数据集，并基于coco128.yaml文件的配置路径，放到对应文件夹中
        -3. 从网络上下载一个字符文件
        -4. 参数代码的更改：
            -a. 修改epochs为4
            -b. 修改batch-size为8
            -c. 修改workers为0
